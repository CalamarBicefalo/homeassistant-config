---
cb_card_welcome_scenes:
  variables:
    ulm_weather: "[[[ return variables.ulm_weather]]]"
    ulm_language: "[[[ return hass['language']; ]]]"
    entity_1:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_2:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_3:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_4:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_5:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_6:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_7:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
  template:
    - "ulm_language_variables"
    - "ulm_translation_engine"
  show_icon: false
  show_name: false
  show_label: true
  styles:
    grid:
      - grid-template-areas: >
          [[[
            if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){
              return "\'item1\' \'item2\' ";
            } else {
              return "\'item1\' \'item2\' \'item3\' \'item4\'";
            }
          ]]]
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content min-content"
      - row-gap: "0px"
    card:
      - padding: 8px
      - margin: -4px -8px 0
      - width: 100vw
      - border-radius: 0
      - background: |
          [[[ return `linear-gradient( 
            to bottom, 
            rgba(0, 0, 0, 0.4), 
            rgba(0, 0, 0, 0) ), 
            url(/local/img/simple_bg.jpg ) no-repeat center center` ]]]
      - background-size: cover
      - box-shadow: "none"
      - cursor: "default"
      - "--mdc-ripple-press-opacity": 0   # prevent click animation
    custom_fields:
      item3:
        - display: >
            [[[
              if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){
                return "none";
              } else {
                return "block";
              }
            ]]]
      item4:
        - display: >
            [[[
              if(variables.ulm_card_welcome_scenes_collapse && states[variables.ulm_card_welcome_scenes_collapse].state == 'on'){
                return "none";
              } else {
                return "block";
              }
            ]]]
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template: "cb_card_topbar_welcome"
        variables:
          ulm_card_welcome_scenes_collapse: "[[[ return variables.ulm_card_welcome_scenes_collapse ]]]"
          ulm_weather: "[[[ return variables.ulm_weather]]]"
          ulm_language: "[[[ return variables.ulm_language ]]]"
        styles:
          card:
            - border-radius: "none"
            - box-shadow: "none"
            - padding: "4px"
    item2:
      card:
        type: "custom:button-card"
        show_icon: false
        show_label: false
        show_name: true
        show_entity_picture: false
        name: |
          [[[
            var today = new Date();
            var time = today.getHours()
            let welcome = '';
            if (time >= '18'){
              welcome = variables.ulm_evening;
            } else if (time >= '12'){
              welcome = variables.ulm_afternoon;
            } else if (time >= '5'){
              welcome = variables.ulm_morning;
            } else {
              welcome = variables.ulm_hello;
            }
            return welcome + ', ' + '   <br>' + user.name + '!';
          ]]]
        styles:
          name:
            - align-self: "start"
            - justify-self: "start"
            - font-weight: "bold"
            - font-size: "24px"
            - margin-left: "16px"
            - text-shadow: 0 1px 0 black
            - color: white
          grid:
            - grid-template-areas: "'i n' 'i l'"
            - grid-template-columns: "min-content auto"
            - grid-template-rows: "min-content min-content"
            - text-align: "start"
          card:
            - box-shadow: "none"
            - padding-bottom: "8px"
            - background: "none"

    item4:
      card:
        type: "custom:button-card"
        template: cb_card_scenes_welcome
        styles:
          card:
            - background: |
                linear-gradient( 
                  to bottom, 
                  rgba(0, 0, 0, 0), 
                  rgba(0, 0, 0, 0.4) )
            - backdrop-filter: blur(2px)
            - color: white
            - border: 1px solid
            - border-color: rgba(255,255,255,0.5)
            - "--mdc-ripple-press-opacity": 0
        variables:
          entity_1: "[[[ return variables.entity_1]]]"
          entity_2: "[[[ return variables.entity_2]]]"
          entity_3: "[[[ return variables.entity_3]]]"
          entity_4: "[[[ return variables.entity_4]]]"
          entity_5: "[[[ return variables.entity_5]]]"
          entity_6: "[[[ return variables.entity_6]]]"
          entity_7: "[[[ return variables.entity_7]]]"
cb_card_title_welcome:
  tap_action:
    action: "none"
  show_icon: false
  show_label: true
  show_name: true
  styles:
    card:
      - background-color: "rgba(0,0,0,0)"
      - box-shadow: "none"
      - height: "auto"
      - width: "auto"
      - margin-top: "-10px"
      - margin-left: "16px"
      - margin-bottom: "-15px"
    grid:
      - grid-template-areas: "'n' 'l'"
      - grid-template-columns: "1fr"
      - grid-template-rows: "min-content min-content"
    name:
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "20px"
    label:
      - justify-self: "start"
      - font-weight: "bold"
      - font-size: "1rem"
      - opacity: "0.4"

# pill
cb_card_scenes_pill_welcome:
  show_icon: false
  show_label: false
  show_name: false
  state:
    - operator: "template"
      value: >
        [[[
          return (entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
        ]]]
      styles:
        card:
          - overflow: "visible"
          - box-shadow: "none"
  styles:
    grid:
      - grid-template-areas: "'item1' 'item2'"
      - grid-template-columns: "min-content"
      - grid-template-rows: "1fr 1fr"
      - row-gap: "12px"
      - justify-items: "center"
      - column-gap: "auto"
    card:
      - background: "none"
      - place-self: "center"
      - width: "100%"
      - height: "84px"
      - box-shadow: none
  color: "var(--google-grey)"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        show_icon: true
        show_label: false
        show_name: false
        tap_action:
          action: >
            [[[
              if(variables?.nav_path){
                return "navigate"
              }
              return "call-service"
            ]]]
          service: >
            [[[
              if(entity?.entity_id.startsWith("scene.")){
                return "scene.turn_on"
              }
              if(entity?.entity_id.startsWith("media_player.")){
                return "media_player.media_play_pause"
              }
              if(entity?.entity_id.startsWith("input_select.")){
                return "input_select.select_option"
              }
              if(entity?.entity_id.startsWith("script.")){
                return entity.entity_id
              }
              return "homeassistant.toggle"
            ]]]
          navigation_path: "[[[ return variables?.nav_path; ]]]"
          service_data: |
            [[[
              if (variables.service_data){
                return variables.service_data
              }
              var obj;
              if(typeof(entity) !== 'undefined' && entity !== undefined){
                if( entity?.entity_id.startsWith("input_select.") )
                  obj = { entity_id: entity?.entity_id, option: variables.state };
                else
                  obj = { entity_id: entity?.entity_id };
                return obj;
              }
            ]]]
        styles:
          grid:
            - grid-template-areas: "i"
          icon:
            - color: >
                [[[
                  var active = !(entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
                  var color = active ? variables?.color : 'grey'
                  return `rgba(var(--color-${color}), 1)`;
                ]]]
            - width: "22px"
          img_cell:
            - background-color: >
                [[[
                  var active = !(entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
                  var color = variables?.color
                  var opacity = '0.20'
                  return `rgba(var(--color-${active?color:'grey'}), ${opacity})`;
                ]]]
            - border: >
                [[[
                  var active = !(entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
                  var color = variables?.color
                  return active ? `2px solid rgba(var(--color-${color}), 1)` : 'none';
                ]]]
            - border-radius: "50%"
            - width: >
                [[[
                  var active = !(entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
                  var color = variables?.color
                  return active ? `42px` : '46px';
                ]]]
            - height: >
                [[[
                  var active = !(entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
                  var color = variables?.color
                  return active ? `42px` : '46px';
                ]]]
          card:
            - box-shadow: "none"
            - border-radius: "50px"
            - padding: "0px"
        state:
          - operator: "template"
            value: >
              [[[
                return (entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state)
              ]]]
            styles:
              card:
                - overflow: "visible"
                - box-shadow: >
                    [[[
                      if (hass.themes.darkMode){
                        return "0px 2px 4px 0px rgba(0,0,0,0.80)";
                      } else {
                        return "var(--box-shadow)";
                      }
                    ]]]
    item2:
      card:
        type: "custom:button-card"
        show_icon: false
        show_label: false
        tap_action:
          action: >
            [[[
              if(variables?.nav_path){
                return "navigate"
              }
              return "call-service"
            ]]]
          navigation_path: "[[[ return variables?.nav_path; ]]]"
          service: >
            [[[
              if(entity?.entity_id.startsWith("scene.")){
                return "scene.turn_on"
              }
              if(entity?.entity_id.startsWith("media_player.")){
                return "media_player.media_play_pause"
              }
              if(entity?.entity_id.startsWith("input_select.")){
                return "input_select.select_option"
              }
              if(entity?.entity_id.startsWith("script.")){
                return entity.entity_id
              }
              return "homeassistant.toggle"
            ]]]
          service_data: |
            [[[
              if (variables.service_data){
                return variables.service_data
              }
              var obj;
              if(typeof(entity) !== 'undefined' && entity !== undefined){
                if( entity?.entity_id.startsWith("input_select.") )
                  obj = { entity_id: entity?.entity_id, option: variables.state };
                else
                  obj = { entity_id: entity?.entity_id };
                return obj;
              }
            ]]]
        styles:
          grid:
            - grid-template-areas: "n"
          name:
            - color: white
            - justify-self: "center"
            - font-weight: "bold"
            - font-size: "9.5px"
            - padding-bottom: "7px"
            - overflow: "[[[return (entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state) ? 'visible' : 'hidden']]]"
          card:
            - background: none
            - box-shadow: "none"
            - padding: "0px 5px 5px 5px"
            - margin-top: "-5px"
            - border-radius: "50px"
            - overflow: "[[[return (entity?.state !== 'on' && entity?.state !== 'playing' && entity?.state != variables?.state) ? 'visible' : 'hidden']]]"

cb_card_topbar_welcome:
  show_icon: false
  show_name: false
  show_label: false
  styles:
    grid:
      - grid-template-areas: "item1 item2"
      - justify-content: "space-between"
      - display: "flex"
    card:
      - border-radius: "none"
      - box-shadow: "none"
      - padding: "12px"
      - background: "none"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template: "chip_temperature"
        entity: "[[[ return variables.ulm_weather]]]"
        tap_action:
          action: "more-info"
        variables:
          ulm_chip_temperature_inside: sensor.bedroom_air_quality_temperature
          ulm_chip_temperature_outside: sensor.outside_temperature
          ulm_chip_temperature_weather: "[[[ return variables.ulm_weather]]]"
        styles:
          card:
            - background: rgba(1,1,1, 0.1)
            - backdrop-filter: blur(6px)
            - color: white
            - border: 1px solid
            - border-color: rgba(255,255,255,0.5)
            - --mdc-ripple-press-opacity: 0.2
          icon:
            - color: white

    item2:
      card:
        type: "custom:button-card"
        tap_action:
          action: "navigate"
          navigation_path: "/config/dashboard"
        template: "chip_mdi_icon_only"
        variables:
          ulm_chip_mdi_icon_only_icon: "mdi:cog-outline"
        styles:
          card:
            - align-self: "end"
            - background: rgba(1,1,1, 0.1)
            - backdrop-filter: blur(6px)
            - color: white
            - border: 1px solid
            - border-color: rgba(255,255,255,0.5)
            - --mdc-ripple-press-opacity: 0.2
          icon:
            - color: white


cb_card_scenes_welcome:
  show_icon: false
  show_name: true
  show_label: false
  variables:
    entity_1:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_2:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_3:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_4:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_5:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_6:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
    entity_7:
      entity_id: ""
      color: >
        [[[
          var colors = ['yellow', 'blue', 'red', 'purple','green', 'pink'];
          var color = colors[Math.floor(Math.random() * colors.length)];
          return color;
        ]]]
  styles:
    grid:
      - grid-template-areas: >
          [[[
            var pills = []
            const entities = [variables.entity_1?.entity_id, variables.entity_2?.entity_id, variables.entity_3?.entity_id, variables.entity_4?.entity_id, variables.entity_5?.entity_id, variables.entity_6?.entity_id, variables.entity_7?.entity_id]
            function entity_check(item) {
                if (item != "") {
                    pills.push("item" + (pills.length+1))
                }
            }
            entities.forEach(entity_check)
            return pills.join(" ")
          ]]]
      - display: "flex"
      - grid-template-rows: "min-content"
      - justify-content: "space-evenly"
    card:
      - border-radius: "var(--border-radius)"
      - box-shadow: "var(--box-shadow)"
      - padding: "12px 12px 0 12px"
      - overflow: "visible"
    custom_fields:
      item1:
        - display: "[[[ return (variables.entity_1.entity_id != '') ? 'block' : 'none' ]]]"
      item2:
        - display: "[[[ return (variables.entity_2.entity_id != '') ? 'block' : 'none' ]]]"
      item3:
        - display: "[[[ return (variables.entity_3.entity_id != '') ? 'block' : 'none' ]]]"
      item4:
        - display: "[[[ return (variables.entity_4.entity_id != '') ? 'block' : 'none' ]]]"
      item5:
        - display: "[[[ return (variables.entity_5.entity_id != '') ? 'block' : 'none' ]]]"
      item6:
        - display: "[[[ return (variables.entity_6.entity_id != '') ? 'block' : 'none' ]]]"
      item7:
        - display: "[[[ return (variables.entity_7.entity_id != '') ? 'block' : 'none' ]]]"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_1; ]]]"
        entity: "[[[ return variables.entity_1.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_1.entity_id ]]]"
              icon: "[[[ return variables.entity_1.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_1.entity_id ]]]"
              name: "[[[ return variables.entity_1.name ]]]"
    item2:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_2; ]]]"
        entity: "[[[ return variables.entity_2.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_2.entity_id ]]]"
              icon: "[[[ return variables.entity_2.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_2.entity_id ]]]"
              name: "[[[ return variables.entity_2.name ]]]"
    item3:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_3; ]]]"
        entity: "[[[ return variables.entity_3.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_3.entity_id ]]]"
              icon: "[[[ return variables.entity_3.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_3.entity_id ]]]"
              name: "[[[ return variables.entity_3.name ]]]"
    item4:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_4; ]]]"
        entity: "[[[ return variables.entity_4.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_4.entity_id ]]]"
              icon: "[[[ return variables.entity_4.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_4.entity_id ]]]"
              name: "[[[ return variables.entity_4.name ]]]"
    item5:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_5; ]]]"
        entity: "[[[ return variables.entity_5.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_5.entity_id ]]]"
              icon: "[[[ return variables.entity_5.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_5.entity_id ]]]"
              name: "[[[ return variables.entity_5.name ]]]"
    item6:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_6; ]]]"
        entity: "[[[ return variables.entity_6.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_6.entity_id ]]]"
              icon: "[[[ return variables.entity_6.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_6.entity_id ]]]"
              name: "[[[ return variables.entity_6.name ]]]"
    item7:
      card:
        type: "custom:button-card"
        template: "cb_card_scenes_pill_welcome"
        variables: "[[[ return variables.entity_7; ]]]"
        entity: "[[[ return variables.entity_7.entity_id ]]]"
        custom_fields:
          item1:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_7.entity_id ]]]"
              icon: "[[[ return variables.entity_7.icon ]]]"
          item2:
            card:
              type: "custom:button-card"
              entity: "[[[ return variables.entity_7.entity_id ]]]"
              name: "[[[ return variables.entity_7.name ]]]"


